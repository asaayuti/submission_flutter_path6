// Mocks generated by Mockito 5.4.5 from annotations
// in core/test/data/datasources/movie/movie_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:core/utils/ssl_client_provider.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SslClientProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSslClientProvider extends _i1.Mock implements _i3.SslClientProvider {
  MockSslClientProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.SecurityContext> get globalContext =>
      (super.noSuchMethod(
            Invocation.getter(#globalContext),
            returnValue: _i4.Future<_i5.SecurityContext>.value(
              _i6.dummyValue<_i5.SecurityContext>(
                this,
                Invocation.getter(#globalContext),
              ),
            ),
          )
          as _i4.Future<_i5.SecurityContext>);

  @override
  _i4.Future<_i2.Client> getSSLPinningClient() =>
      (super.noSuchMethod(
            Invocation.method(#getSSLPinningClient, []),
            returnValue: _i4.Future<_i2.Client>.value(
              _FakeClient_0(this, Invocation.method(#getSSLPinningClient, [])),
            ),
          )
          as _i4.Future<_i2.Client>);
}
